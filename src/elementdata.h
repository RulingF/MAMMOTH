// The MIT License (MIT)

// Copyright (c) 2019 Rulin Feng

//  Permission is hereby granted, free of charge, to any person obtaining a
//  copy of this software and associated documentation files (the "Software"),
//  to deal in the Software without restriction, including without limitation
//  the rights to use, copy, modify, merge, publish, distribute, sublicense,
//  and/or sell copies of the Software, and to permit persons to whom the
//  Software is furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
//  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
//  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//  DEALINGS IN THE SOFTWARE.

/* This file is modifed and created partially from  

** The new PSI standard header file for atomic masses.
**
** Created by Matt Leininger, July 1995
**
** This file contains three arrays.  The first is a list of atomic masses
** for a number of isotopes.  The second is a list of isotope labels which
** correspond to the masses in the first array.  The mass labels given
** are the same as those in W. D. Allen's INTDER95.  The final array is a
** list of atomic masses for the first several elements, with the most
** common isotopomer mass given.  This last array is most useful for
** converting an atomic number into an atomic mass.
**
** Please be sure that any modifications to this file are reflected in
** _all three_ arrays if necessary.
**
** Modifications:
** 10/08/99 EFV - Changed an2masses[0] to 0.0000
**                (ghost atom's weight should be 0)
**
** 08/16/02 EFV - Updated atomic_masses[] and an2masses for H-Ar using NIST database
**                of Atomic Weights and Isotopic Compositions (www.nist.gov)
**
** 08/23/02 EFV - Use lithium isotope 7 as the default (most abundant)
**
** 03/03/08 MT - extended set of atoms by data from mathematica script. For an2masses
**               for naturally occurring atoms, the most abundant is used, otherwise the
**               atom with the longest halflife time.
**
** 08/31/18 LAB - autogenerated from NIST json publication via qcelemental. Corrects Kr
**                and some unstable element masses.
**
** AUTOGENERATED, DO NOT EDIT!
**
*/

#ifndef _ELEMENTDATA_H
#define _ELEMENTDATA_H

#include <string.h>

#define TOTALNUMBEROFELEMENTS   113

static const char *all_element_symbols[] = {
    "X",  "H",  "He", "Li", "Be", "B",  "C",  "N",  "O",  "F",  "Ne", "Na", "Mg", "Al", "Si", "P",  "S",
    "Cl", "Ar", "K",  "Ca", "Sc", "Ti", "V",  "Cr", "Mn", "Fe", "Co", "Ni", "Cu", "Zn", "Ga", "Ge", "As",
    "Se", "Br", "Kr", "Rb", "Sr", "Y",  "Zr", "Nb", "Mo", "Tc", "Ru", "Rh", "Pd", "Ag", "Cd", "In", "Sn",
    "Sb", "Te", "I",  "Xe", "Cs", "Ba", "La", "Ce", "Pr", "Nd", "Pm", "Sm", "Eu", "Gd", "Tb", "Dy", "Ho",
    "Er", "Tm", "Yb", "Lu", "Hf", "Ta", "W",  "Re", "Os", "Ir", "Pt", "Au", "Hg", "Tl", "Pb", "Bi", "Po",
    "At", "Rn", "Fr", "Ra", "Ac", "Th", "Pa", "U",  "Np", "Pu", "Am", "Cm", "Bk", "Cf", "Es", "Fm", "Md",
    "No", "Lr", "Rf", "Db", "Sg", "Bh", "Hs", "Mt", "Ds", "Rg", "Cn"}; //113 elements

static const double all_atomic_masses[] = {0,
                                   1.00782503223,
                                   4.00260325413,
                                   7.0160034366,
                                   9.012183065,
                                   11.00930536,
                                   12.0000000,
                                   14.00307400443,
                                   15.99491461957,
                                   18.99840316273,
                                   19.9924401762,
                                   22.9897692820,
                                   23.985041697,
                                   26.98153853,
                                   27.97692653465,
                                   30.97376199842,
                                   31.9720711744,
                                   34.968852682,
                                   39.9623831237,
                                   38.9637064864,
                                   39.962590863,
                                   44.95590828,
                                   47.94794198,
                                   50.94395704,
                                   51.94050623,
                                   54.93804391,
                                   55.93493633,
                                   58.93319429,
                                   57.93534241,
                                   62.92959772,
                                   63.92914201,
                                   68.9255735,
                                   73.921177761,
                                   74.92159457,
                                   79.9165218,
                                   78.9183376,
                                   83.9114977282,
                                   84.9117897379,
                                   87.9056125,
                                   88.9058403,
                                   89.9046977,
                                   92.9063730,
                                   97.90540482,
                                   97.9072124,
                                   101.9043441,
                                   102.9054980,
                                   105.9034804,
                                   106.9050916,
                                   113.90336509,
                                   114.903878776,
                                   119.90220163,
                                   120.9038120,
                                   129.906222748,
                                   126.9044719,
                                   131.9041550856,
                                   132.9054519610,
                                   137.90524700,
                                   138.9063563,
                                   139.9054431,
                                   140.9076576,
                                   141.9077290,
                                   144.9127559,
                                   151.9197397,
                                   152.9212380,
                                   157.9241123,
                                   158.9253547,
                                   163.9291819,
                                   164.9303288,
                                   165.9302995,
                                   168.9342179,
                                   173.9388664,
                                   174.9407752,
                                   179.9465570,
                                   180.9479958,
                                   183.95093092,
                                   186.9557501,
                                   191.9614770,
                                   192.9629216,
                                   194.9647917,
                                   196.96656879,
                                   201.97064340,
                                   204.9744278,
                                   207.9766525,
                                   208.9803991,
                                   208.9824308,
                                   209.9871479,
                                   222.0175782,
                                   223.0197360,
                                   226.0254103,
                                   227.0277523,
                                   232.0380558,
                                   231.0358842,
                                   238.0507884,
                                   237.0481736,
                                   244.0642053,
                                   243.0613813,
                                   247.0703541,
                                   247.0703073,
                                   251.0795886,
                                   252.082980,
                                   257.0951061,
                                   258.0984315,
                                   259.10103,
                                   266.11983,
                                   267.12179,
                                   268.12567,
                                   271.13393,
                                   270.13336,
                                   269.13375,
                                   278.15631,
                                   281.16451,
                                   282.16912,
                                   285.17712,};//113 elements

static const unsigned int ele2Z(const char *ele)
{
    unsigned int Z;
    for (Z = 0 ; Z < TOTALNUMBEROFELEMENTS; Z++)
        if (strcmp(all_element_symbols[Z],ele) == 0)
            {
                return Z;
            }
    return 0;
}//Return 0, which is a dummy atom X if exceed

#endif //_ELEMENTDATA_H